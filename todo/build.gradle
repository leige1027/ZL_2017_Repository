/*
  每个Gradle的构建脚本都有一个Project实例,即项目实例;
  构建脚本里的所有代码默认作用域都是Project
 */

/*
  group和version是Project中的两个属性
  对应各自的属性值
 */
project.group = 'com.zl.gradle' // 等价于group 'com.zl.gradle'
version '1.0-SNAPSHOT' // 等价于project.version = '1.0-SNAPSHOT'



/*
  apply是Project中的一个方法,
  apply (plugin: 'java') :调用可以省略括号
  plugin: 'java' 命名参数
 */
apply plugin: 'java'
/*
  加入此插件,idea右侧Gradle/Tasks/build/目录出现war功能
 */
apply plugin: 'war'  // 官网查看各种支持插件

sourceCompatibility = 1.8

/*
  repositorie是个方法
  被闭包{mavenCentral()}作为参数调用
  省略括号
 */
repositories {
    mavenCentral()
}

/*
  dependencies是个方法
  被闭包{testCompile group: 'junit', name: 'junit', version: '4.11'}作为参数调用
  省略括号
 */
dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

/*
   创建一个闭包,用于创建目录
   传递字符串路径参数path
   功能:根据路径创建文件
 */
def createDir = {
    path ->
        File dir = new File(path);
        if(!dir.exists()){
            dir.mkdirs();
        }
}

/*
   自定义一个1,自动创建java项目目录结构
 */
task makeJavaDir(){
    def paths = ['src/main/java','src/main/resouces','src/test/java','src/test/resouces']
    doFirst{
        // 路径数组参数,forEach方法调用闭包,创建目录结构
        paths.forEach(createDir);
    }
}

/*
   自定义一个任务2,用于创建web项目目录结构
   比java项目目录多一个webapp目录
   让web工程依赖java工程
   只创建web特有的webapp目录
 */
task makeWebDir(){
    dependsOn 'makeJavaDir';
    def paths = ['src/main/webapp','src/test/webapp'];
    doLast{
        // 路径数组参数,forEach方法调用闭包,创建目录结构
        paths.forEach(createDir);
    }
}